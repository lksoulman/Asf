// ************************************************************************ //
// WARNING
// -------
// This file is generated by the Type Library importer or Type Libary Editor.
// Barring syntax errors, the Editor will parse modifications made to the file.
// However, when applying changes via the Editor this file will be regenerated
// and comments or formatting changes will be lost.
// ************************************************************************ //
// File generated on 2016-10-08 16:32:19 (- $Rev: 12980 $, 1300860343).

[
  uuid(3EC51403-DDBB-46D4-98E6-10906B412C4D),
  version(1.0)

]
library QuoteMngr
{

  importlib("stdole2.tlb");
  importlib("stdvcl40.dll");

  interface IQuoteManager;
  dispinterface IQuoteManagerEvents;
  coclass QuoteManager;
  interface IQuoteMessage;
  interface IQuoteSync;
  interface IQuoteUpdate;
  interface IQuoteBlock;
  interface IQuoteRealTime;
  interface IQuoteReportSort;
  interface IQuoteGeneralSort;
  interface IQuoteTrend;
  interface IQuoteStockTick;
  interface IQuoteTechData;
  interface IQuoteLevelTransaction;
  interface IQuoteLevelOrderQueue;
  interface IQuoteLevelTOTALMAX;
  interface IQuoteLevelSINGLEMA;
  interface IQuoteCodeInfos;
  interface IQuoteMultiTrend;
  interface IQuoteTrendHis;
  interface IQuoteMarketMonitor;
  interface IQuoteColValue;
  interface IQuoteDDERealTime;


  [
    uuid(CF0D0B25-0BAB-4EAF-8630-6E1A0BAF829D)
  ]
  enum ProxyKindEnum
  {
    ProxyKind_NoProxy = 1,
    ProxyKind_HTTPProxy = 2,
    ProxyKind_SOCKS5Proxy = 3,
    ProxyKind_SOCKS4Proxy = 4
  };

  [
    uuid(E6EB9359-ED6A-4645-9453-2760D7055792)
  ]
  enum QuoteTypeEnum
  {
    [helpstring("报价表")]
    QuoteType_REALTIME = 1,
    [helpstring("排名报价表")]
    QuoteType_REPORTSORT = 2,
    [helpstring("综合排名报表")]
    QuoteType_GENERALSORT = 4,
    [helpstring("分时走势")]
    QuoteType_TREND = 8,
    [helpstring("个股分笔")]
    QuoteType_STOCKTICK = 16,
    [helpstring("个股分笔")]
    QuoteType_LIMITTICK = 32,
    [helpstring("盘后分析 1分钟")]
    QuoteType_TECHDATA_MINUTE1 = 64,
    [helpstring("盘后分析 5分钟")]
    QuoteType_TECHDATA_MINUTE5 = 128,
    [helpstring("盘后分析 日线")]
    QuoteType_TECHDATA_DAY = 256,
    QuoteType_Level_REALTIME = 512,
    QuoteType_Level_TRANSACTION = 1024,
    QuoteType_Level_ORDERQUEUE = 2048,
    QuoteType_Level_SINGLEMA = 4096,
    QuoteType_Level_TOTALMAX = 8192,
    QuoteType_HISTREND = 16384,
    QuoteType_CODEINFOS = 32768,
    QuoteType_TECHDATA_MINUTE15 = 65536,
    QuoteType_TECHDATA_MINUTE30 = 131072,
    QuoteType_TECHDATA_MINUTE60 = 262144,
    QuoteType_SingleColValue = 524288,
    QuoteType_MarketMonitor = 1048576,
    QuoteType_LIMITPRICE = 2097152,
    QuoteType_DDEBigOrderRealTimeByOrder = 4194304
  };

  [
    uuid(896DF212-D462-41AE-BDFC-624D1946B45C)
  ]
  enum ServerTypeEnum
  {
    stStockLevelI = 1,
    stStockLevelII = 2,
    stFutues = 3,
    stStockHK = 4,
    stForeign = 5,
    stHKDelay = 6,
    stDDE = 7,
    stUSStock = 8
  };

  [
    uuid(8820AE14-E8CD-403D-A0BC-6B9EB0AD9DD8)
  ]
  enum CodeTypeEnum
  {
    SHStock = 0,
    SZStock = 1,
    Futues_SH = 2,
    Futues_DL = 3,
    Futues_ZZ = 4,
    Futues_Stock = 5,
    HK_Stock = 6,
    HK_GE = 7,
    HK_Index = 8,
    Other_Stock = 9
  };

  [
    uuid(0A825757-C955-4F84-B0BA-11B77CAD2500),
    helpstring("Dispatch interface for QuoteManager Object"),
    dual,
    oleautomation
  ]
  interface IQuoteManager: IDispatch
  {
    [id(0x000000C9), helpstring("设置服务器地址 (多次设置)")]
    HRESULT _stdcall ServerSetting([in] BSTR IP, [in] unsigned short Port, [in] enum ServerTypeEnum ServerType, [out, retval] VARIANT_BOOL* result);
    [id(0x000000CA), helpstring("连接服务器并发数")]
    HRESULT _stdcall ConcurrentSetting([in] unsigned short Value, [out, retval] VARIANT_BOOL* result);
    [id(0x000000CB), helpstring("设置一级代理")]
    HRESULT _stdcall Proxy1Setting([in] enum ProxyKindEnum ProxyKind, [in] BSTR ProxyIP, [in] unsigned short ProxyPort, [in] BSTR ProxyUser, [in] BSTR ProxyPWD, [out, retval] VARIANT_BOOL* result);
    [id(0x000000CC), helpstring("设置二级代理")]
    HRESULT _stdcall Proxy2Setting([in] enum ProxyKindEnum ProxyKind, [in] BSTR ProxyIP, [in] unsigned short ProxyPort, [in] BSTR ProxyUser, [in] BSTR ProxyPWD, [out, retval] VARIANT_BOOL* result);
    [id(0x000000CD), helpstring("清除设置  (服务器 代理)")]
    HRESULT _stdcall ClearSetting(void);
    [id(0x000000CE), helpstring("起动行情服务")]
    HRESULT _stdcall StartService(void);
    [id(0x000000CF), helpstring("停止行情服务")]
    HRESULT _stdcall StopService(void);
    [propget, id(0x000000D0), helpstring("当前状态")]
    HRESULT _stdcall Active([out, retval] VARIANT_BOOL* Value);
    [id(0x000000D1), helpstring("连接消息通知")]
    HRESULT _stdcall ConnectMessage([in] IQuoteMessage* QuoteMessage);
    [id(0x000000D2), helpstring("断开消息通知")]
    HRESULT _stdcall DisconnectMessage([in] IQuoteMessage* QuoteMessage);
    [id(0x000000D3), helpstring("订阅行情数据")]
    HRESULT _stdcall Subscribe([in] enum QuoteTypeEnum QuoteType, [in] __int64 Stocks, [in] long Count, [in] long Cookie, [in] VARIANT Value, [out, retval] VARIANT_BOOL* result);
    [id(0x000000D4), helpstring("获取行情数据")]
    HRESULT _stdcall QueryData([in] enum QuoteTypeEnum QuoteType, [in] __int64 CodeInfo, [out, retval]  IUnknown** result);
    [id(0x000000D5)]
    HRESULT _stdcall Connect([in] enum ServerTypeEnum ServerType);
    [id(0x000000D6)]
    HRESULT _stdcall Disconnect([in] enum ServerTypeEnum ServerType);
    [propget, id(0x000000D7)]
    HRESULT _stdcall Connected([in] enum ServerTypeEnum ServerType, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D8)]
    HRESULT _stdcall LevelSetting([in] BSTR User, [in] BSTR Pass);
    [id(0x000000D9)]
    HRESULT _stdcall SendKeepActiveTime([in] enum ServerTypeEnum ServerType);
    [id(0x000000DA)]
    HRESULT _stdcall KeepActiveRecvTime([in] enum ServerTypeEnum ServerType, [out, retval] double* result);
    [id(0x000000DB)]
    HRESULT _stdcall ConnectServerInfo([in] enum ServerTypeEnum ServerType, [in, out] BSTR* IP, [in, out] unsigned short* Port);
    [id(0x000000DC)]
    HRESULT _stdcall SetWorkPath([in] BSTR APath);
  };

  [
    uuid(F3FEEF67-0BFD-41CE-900C-52FFCB140111),
    dual,
    oleautomation
  ]
  interface IQuoteMessage: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall MsgCookie([out, retval] long* Value);
    [propput, id(0x000000C9)]
    HRESULT _stdcall MsgCookie([in] long Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall MsgHandle([out, retval] __int64* Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall MsgActive([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall MsgActive([in] VARIANT_BOOL Value);
  };

  [
    uuid(AFC46AC5-B589-4A00-B618-87ED730AD720),
    dual,
    oleautomation
  ]
  interface IQuoteSync: IDispatch
  {
    [id(0x000000C9)]
    HRESULT _stdcall BeginRead(void);
    [id(0x000000CA)]
    HRESULT _stdcall EndRead(void);
  };

  [
    uuid(72A5BB57-6EA6-4F1D-97B2-954B4B991FB1),
    dual,
    oleautomation
  ]
  interface IQuoteUpdate: IDispatch
  {
    [id(0x000000C9)]
    HRESULT _stdcall Update([in] long DataType, [in] __int64 Data, [in] long Size);
    [id(0x000000CA)]
    HRESULT _stdcall BeginWrite(void);
    [id(0x000000CB)]
    HRESULT _stdcall EndWrite(void);
    [id(0x000000CC)]
    HRESULT _stdcall DataState([in] long State, [in, out] __int64* IValue, [in, out] BSTR* SValue, [in, out] VARIANT* VValue, [out, retval] BSTR* result);
  };

  [
    uuid(3F56E4A6-5726-4D12-B230-C6D70859DB89),
    dual,
    oleautomation
  ]
  interface IQuoteBlock: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall BlockItem([in] long Block, [out, retval] long* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall Blocks([out, retval] long* Value);
  };

  [
    uuid(E02E1A77-1C55-4379-847D-BC5C4CBCC3C4),
    dual,
    oleautomation
  ]
  interface IQuoteRealTime: IQuoteSync
  {
    [propget, id(0x0000012D), helpstring("取证券初始化信息.")]
    HRESULT _stdcall Codes([in] unsigned short CodeType, [in] BSTR Code, [out, retval] __int64* Value);
    [propget, id(0x0000012E)]
    HRESULT _stdcall Finances([in] unsigned short CodeType, [in] BSTR Code, [out, retval] __int64* Value);
    [propget, id(0x0000012F)]
    HRESULT _stdcall ExRights([in] unsigned short CodeType, [in] BSTR Code, [out, retval] __int64* Value);
    [propget, id(0x00000130)]
    HRESULT _stdcall Datas([in] unsigned short CodeType, [in] BSTR Code, [out, retval] __int64* Value);
    [propget, id(0x00000131)]
    HRESULT _stdcall CodeToKeyIndex([in] unsigned short CodeType, [in] BSTR Code, [out, retval] long* Value);
    [propget, id(0x00000132)]
    HRESULT _stdcall PrevClose([in] unsigned short CodeType, [in] BSTR Code, [out, retval] long* Value);
    [id(0x00000133)]
    HRESULT _stdcall GetStockTypeInfo([in] unsigned short CodeType, [out, retval] __int64* Value);
    [id(0x00000135)]
    HRESULT _stdcall GetInitDate([in] unsigned short CodeType, [out, retval] __int64* Value);
    [id(0x00000134)]
    HRESULT _stdcall GetCodeInfoByKeyStr([in] BSTR Key, [out] __int64* CodeInfo, [out, retval] VARIANT_BOOL* Value);
    [id(0x00000136)]
    HRESULT _stdcall GetLimitPrice([in] unsigned short CodeType, [in] BSTR Code, [out, retval] __int64* value);
    [propget, id(0x00000137)]
    HRESULT _stdcall LevelDatas([in] short CodeType, [in] BSTR Code, [out, retval] __int64* Value);
  };

  [
    uuid(33E6CE6A-E5F8-4FAD-91F8-B56F6ADF69B4),
    dual,
    oleautomation
  ]
  interface IQuoteReportSort: IQuoteSync
  {
    [propget, id(0x0000012D)]
    HRESULT _stdcall SortType([out, retval] long* Value);
    [propget, id(0x0000012E)]
    HRESULT _stdcall Count([out, retval] long* Value);
    [propget, id(0x0000012F)]
    HRESULT _stdcall Data([out, retval] __int64* Value);
    [propget, id(0x00000130)]
    HRESULT _stdcall VarCode([out, retval] long* Value);
  };

  [
    uuid(34A550D5-5ED4-49CA-A626-AC92FA1ED1A2),
    dual,
    oleautomation
  ]
  interface IQuoteGeneralSort: IQuoteSync
  {
    [propget, id(0x0000012E)]
    HRESULT _stdcall Count([out, retval] long* Value);
    [propget, id(0x0000012F)]
    HRESULT _stdcall Data([out, retval] __int64* Value);
    [propget, id(0x00000130)]
    HRESULT _stdcall VarCode([out, retval] long* Value);
  };

  [
    uuid(D33C0456-F3A7-4A02-B795-D8330CFE2E12),
    dual,
    oleautomation
  ]
  interface IQuoteTrend: IQuoteSync
  {
    [propget, id(0x0000012D)]
    HRESULT _stdcall Datas([out, retval] __int64* Value);
    [propget, id(0x0000012E)]
    HRESULT _stdcall Count([out, retval] long* Value);
    [propget, id(0x0000012F)]
    HRESULT _stdcall VarCode([out, retval] long* Value);
    [propget, id(0x00000130)]
    HRESULT _stdcall IndexToTime([in] long Index, [out, retval] long* Value);
    [propget, id(0x00000131)]
    HRESULT _stdcall TimeCount([out, retval] long* Value);
    [propget, id(0x00000132)]
    HRESULT _stdcall CodeInfo([out, retval] __int64* Value);
    [id(0x00000134)]
    HRESULT _stdcall TimeToIndex([in] long Time, [out, retval] long* Value);
    [id(0x00000133)]
    HRESULT _stdcall GetTrendInfo([out, retval] __int64* Value);
    [propget, id(0x00000135)]
    HRESULT _stdcall VADatas([out, retval] __int64* Value);
    [propget, id(0x00000136)]
    HRESULT _stdcall VADataCount([out, retval] long* Value);
    [id(0x00000137), helpstring("集合竞价数据时间.")]
    HRESULT _stdcall GetVATime([in, out] long* Begin, [in, out] long* End);
    [id(0x00000138)]
    HRESULT _stdcall IsVAData([out, retval] VARIANT_BOOL* value);
  };

  [
    uuid(EF02C789-3D3D-4ABF-A899-1DA72EFB5758),
    dual,
    oleautomation
  ]
  interface IQuoteStockTick: IQuoteSync
  {
    [propget, id(0x0000012D)]
    HRESULT _stdcall Datas([out, retval] __int64* Value);
    [propget, id(0x0000012E)]
    HRESULT _stdcall Count([out, retval] long* Value);
    [propget, id(0x0000012F)]
    HRESULT _stdcall VarCode([out, retval] long* Value);
    [propget, id(0x00000130)]
    HRESULT _stdcall IndexToTime([in] long Index, [out, retval] long* Value);
    [propget, id(0x00000131)]
    HRESULT _stdcall CodeInfo([out, retval] __int64* Value);
  };

  [
    uuid(CDAD30E2-C9F1-49B3-AE53-57E37B7D7729),
    dual,
    oleautomation
  ]
  interface IQuoteTechData: IQuoteSync
  {
    [propget, id(0x0000012D)]
    HRESULT _stdcall Datas([out, retval] __int64* Value);
    [propget, id(0x0000012E)]
    HRESULT _stdcall Count([out, retval] long* Value);
    [propget, id(0x0000012F)]
    HRESULT _stdcall VarCode([out, retval] long* Value);
    [propget, id(0x00000130)]
    HRESULT _stdcall CodeInfo([out, retval] __int64* value);
  };

  [
    uuid(ED72D8FA-2F1A-4BB3-BC62-32C835BA5465),
    dual,
    oleautomation
  ]
  interface IQuoteLevelTransaction: IQuoteSync
  {
    [propget, id(0x0000012D)]
    HRESULT _stdcall Datas([out, retval] __int64* Value);
    [propget, id(0x0000012E)]
    HRESULT _stdcall Count([out, retval] long* Value);
    [propget, id(0x0000012F)]
    HRESULT _stdcall VarCode([out, retval] long* Value);
    [propget, id(0x00000130)]
    HRESULT _stdcall CodeInfo([out, retval] __int64* Value);
  };

  [
    uuid(B3EC3D0A-4DB1-4759-913C-45DA1223436F),
    dual,
    oleautomation
  ]
  interface IQuoteLevelOrderQueue: IQuoteSync
  {
    [propget, id(0x0000012D)]
    HRESULT _stdcall BuyData([out, retval] __int64* Value);
    [propget, id(0x0000012E)]
    HRESULT _stdcall SellData([out, retval] __int64* Value);
    [propget, id(0x0000012F)]
    HRESULT _stdcall VarCode([out, retval] long* Value);
    [propget, id(0x00000130)]
    HRESULT _stdcall CodeInfo([out, retval] __int64* Value);
  };

  [
    uuid(E6E7AE13-FA1F-467D-B9C0-9655397C02E1),
    dual,
    oleautomation
  ]
  interface IQuoteLevelTOTALMAX: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall Datas([out, retval] __int64* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall Count([out, retval] long* Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall VarCode([out, retval] long* Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall CodeInfo([out, retval] __int64* Value);
  };

  [
    uuid(B364C3EB-C34C-4CD8-B81E-FB778B30083E),
    dual,
    oleautomation
  ]
  interface IQuoteLevelSINGLEMA: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall Datas([out, retval] __int64* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall Count([out, retval] long* Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall VarCode([out, retval] long* Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall CodeInfo([out, retval] __int64* Value);
  };

  [
    uuid(37A75FA9-CC72-4107-A2C2-D2E92DC282C7),
    dual,
    oleautomation
  ]
  interface IQuoteCodeInfos: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall CodeInfos([in] enum CodeTypeEnum CodeType, [out] long* Count, [out, retval] __int64* Value);
  };

  [
    uuid(4C82BEFF-787C-4B87-BDB7-A1026D251E65),
    dual,
    oleautomation
  ]
  interface IQuoteMultiTrend: IQuoteSync
  {
    [id(0x000000CB)]
    HRESULT _stdcall count([out, retval] long* value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall Datas([in] long Index, [out, retval] IQuoteTrend* Value);
  };

  [
    uuid(9B77DC3B-B54A-4C38-A749-DE51C9E3BAC4),
    dual,
    oleautomation
  ]
  interface IQuoteTrendHis: IQuoteTrend
  {
    [id(0x00000191)]
    HRESULT _stdcall ResetDate([in] long ADate);
  };

  [
    uuid(04E901D3-39EA-4BCC-AECD-A8F66C4ABFB5),
    dual,
    oleautomation
  ]
  interface IQuoteMarketMonitor: IQuoteSync
  {
    [id(0x0000012D)]
    HRESULT _stdcall Count([out, retval] long* Param1);
    [propget, id(0x0000001E)]
    HRESULT _stdcall Datas([out, retval] __int64* Value);
    [propget, id(0x0000012F)]
    HRESULT _stdcall VarCode([out, retval] long* Value);
  };

  [
    uuid(42A9BF77-BDEB-4C3B-9BAA-082F34AC93FC),
    dual,
    oleautomation
  ]
  interface IQuoteColValue: IQuoteSync
  {
    [id(0x0000012D)]
    HRESULT _stdcall Count([out, retval] long* Res);
    [propget, id(0x0000012E)]
    HRESULT _stdcall Datas([out, retval] __int64* Value);
    [propget, id(0x0000012F)]
    HRESULT _stdcall VarCode([out, retval] long* Value);
    [propget, id(0x00000130)]
    HRESULT _stdcall ColCode([out, retval] long* Value);
  };

  [
    uuid(65D81541-4A1B-4F19-94CE-248B437E297F),
    dual,
    oleautomation
  ]
  interface IQuoteDDERealTime: IQuoteSync
  {
    [id(0x0000012D)]
    HRESULT _stdcall Datas([in] unsigned short CodeType, [in] BSTR Code, [out, retval] __int64* Param3);
  };

  [
    uuid(9B851423-674B-4FCC-B0CA-70C051EEBF79)
  ]
  dispinterface IQuoteManagerEvents
  {
    properties:
    methods:
    [id(0x000000C9)]
    HRESULT OnConnected([in] BSTR IP, [in] unsigned short Port, [in] enum ServerTypeEnum ServerType);
    [id(0x000000CA)]
    HRESULT OnDisconnected([in] BSTR IP, [in] unsigned short Port, [in] enum ServerTypeEnum ServerType);
    [id(0x000000CB)]
    HRESULT OnWriteLog([in] BSTR Log);
    [id(0x000000CC)]
    HRESULT OnProgress([in] BSTR Msg, [in] long Max, [in] long Value);
  };

  [
    uuid(99611CC7-551E-4313-9C40-FD49FF9A5533),
    helpstring("QuoteManager Object")
  ]
  coclass QuoteManager
  {
    [default] interface IQuoteManager;
    [default, source] dispinterface IQuoteManagerEvents;
  };

};
